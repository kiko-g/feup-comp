options {
    LOOKAHEAD = 1;
    STATIC = false;
}

PARSER_BEGIN(Jmm)
    import java.util.ArrayList;
    import java.util.List;
    import pt.up.fe.comp.jmm.report.Report;
    import static pt.up.fe.comp.jmm.AttributeType.*;
    import static pt.up.fe.comp.jmm.report.Stage.*;
    import static pt.up.fe.comp.jmm.report.ReportType.*;

    public class Jmm {
        private int errno = 0;
        private static final int MAX_NUM_ERRORS = 10;
        private final List<Report> reports = new ArrayList<Report>();

        public static void main(String args[]) throws RuntimeException { }

        public void processWhileError(ParseException e) {
            if ((this.errno++) > Jmm.MAX_NUM_ERRORS) {
                throw new RuntimeException(String.format("Too many errors(%d). Aborting....", MAX_NUM_ERRORS));
            }

            Token currentToken = e.currentToken;
            Token errorToken = currentToken.next;
            this.reports.add(new Report(ERROR, SYNTATIC, errorToken.beginLine, errorToken.endLine, getErrorMessage(currentToken, e.expectedTokenSequences, e.tokenImage)));
            System.err.println(String.format("Error(%d) detected during parsing of while expression. Unexpected token '%s' ....", this.errno, errorToken));
            System.err.println("Error Details:");
            System.err.println(String.format("\tLine: %d \t Column: %d", errorToken.beginLine, errorToken.beginColumn));
            System.err.println(getErrorMessage(currentToken, e.expectedTokenSequences, e.tokenImage));
            System.err.println("------------------------------------------------------------------------");
            recoverFromWhile();
        }

        private static String getErrorMessage(Token currentToken,  int[][] expectedTokenSequences, String[] tokenImage) {
            int maxSize = 0;
            StringBuilder expected = new StringBuilder("\t");

            for (int i = 0; i < expectedTokenSequences.length; i++) {
                if (maxSize < expectedTokenSequences[i].length) {
                    maxSize = expectedTokenSequences[i].length;
                }
                for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                    expected.append(tokenImage[expectedTokenSequences[i][j]]);
                }

                if(i != expectedTokenSequences.length - 1) {
                    expected.append(" | ");
                } else {
                    expected.append("\n");
                }
            }

            return "Was expecting:\n" + expected;
          }

        public void recoverFromWhile() {
            Token t = getToken(0);
            do {
                if(t.kind == RPAR && getToken(1).kind != RPAR) { // If it finds the last ")"
                    return;
                } else if(getToken(1).kind == LBRACKET) { // If it finds the first "{"
                    return;
                }
                t = getNextToken();
            } while (true);
        }

        public List<Report> getReports() {
            return this.reports;
        }
    }
PARSER_END(Jmm)

SKIP: {
    " " | "\t" | "\r" | "\n"
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >  /*multiline comment*/
    | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //inline comment
}

/*Reserved Words*/
TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE: "true" >
    | <FALSE: "false" >
    | <THIS: "this">
    | <NEW: "new">
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COMMA: ",">
    | < LBRACKET: "{">
    | < RBRACKET: "}">
    | < LSQRBRACKET: "[">
    | < RSQRBRACKET: "]">
    | < LPAR: "(">
    | < RPAR: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <PLUS: "+">
    | <MINUS: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <AND: "&&">
    | <NOT: "!">
    | <EQUALS: "=">
}

TOKEN: {
   <IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >

   | < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> >
   | < #DECIMAL: (["0"-"9"])+ >
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ >
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ >
   | < #OCTAL: "0"(["0"-"7"])* >
}

SimpleNode Program(): { } {
    ImportDeclaration() ClassDeclaration() #Class { if (this.errno > 0) throw new RuntimeException(); return jjtThis; }
}

void ImportDeclaration() #void: {Token t;} {
    (t=<IMPORT> ImportStatement() <SEMICOLON> {jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Import )*
}

void ImportStatement() #void: {} {
    <IDENTIFIER> #Package(true) (<DOT> <IDENTIFIER> #Package(1))*
}

void ClassDeclaration() #void: {} {
    <CLASS> ClassBody() <LBRACKET> (VarDeclaration())* (MethodDeclaration())* <RBRACKET>
}

void ClassBody() #void: {} {
    Identifier() [<EXTENDS> Identifier()]
}

void VarDeclaration() #void: {} {
    Type() Identifier() #VarDeclaration(2) <SEMICOLON>
}

void MethodDeclaration() #void: { } {
    <PUBLIC> (MainDeclaration() #Main | RegularMethodDeclaration() #Method)
}

void MainDeclaration() #void: {} {
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LSQRBRACKET> <RSQRBRACKET> Identifier() #MethodParams(1) <RPAR> <LBRACKET>
        MethodBody() #MethodBody
    <RBRACKET>
}

void RegularMethodDeclaration() #void: {} {
    Type() Identifier() <LPAR> [MethodParameters()] <RPAR> <LBRACKET>
        MethodBody() #MethodBody
        <RETURN> Expression() #Return(1) <SEMICOLON>
    <RBRACKET>
}

void MethodParameters() #void: {} {
    Param() (<COMMA> Param())*
}

void Param() #void: {} {
    Type() Identifier() #Param(2)
}

void MethodBody() #void: {} {
    (LOOKAHEAD(2) VarDeclaration())* (Statement())*
}

void Type() #void: {Token t;} {
    t=<BOOLEAN> {jjtThis.put(VALUE,  t.image); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Boolean
    | t=<INT> {jjtThis.put(VALUE,  t.image); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Int [<LSQRBRACKET> <RSQRBRACKET> #Array(1) ]
    | t=<IDENTIFIER> {jjtThis.put(VALUE,  t.image); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Type
}

void Statement() #void: {} {
    <LBRACKET> (Statement())* #StatementBlock <RBRACKET>
    | IfStatement()
    | WhileStatement()
    | (LOOKAHEAD(2) <IDENTIFIER> #Var [ArrayAccess() #ArrayAccess(1)] <EQUALS> Expression() #Assign(2) |  Expression() #Expression) <SEMICOLON>
}

void IfStatement() #void: {Token t;} {
    <IF> t=<LPAR> Expression() <RPAR> Statement() <ELSE> Statement()
    {jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #If(3)
}

/* *
* While Recovery
* https://www.cs.purdue.edu/homes/hosking/javacc/doc/errorrecovery.html
* https://www.cs.purdue.edu/homes/hosking/javacc/doc/apiroutines.html
* */
void WhileStatement() #void: {Token t;} {
    t=<WHILE>
    try {
        t=<LPAR> Expression() <RPAR>
    } catch (ParseException e) {
        processWhileError(e);
    }
    Statement()
    {jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #While(2)
}

/* *
* EXPRESSION:
* https://introcs.cs.princeton.edu/java/11precedence/ -> Operators
* Operators listed in a javacc file go from the ones with least precedence to the ones with most precedence (from top to bottom)
* */
void Expression() #void: {} {
    LogicalAndExp()
}

void LogicalAndExp() #void: {} {
    RelationalLessExp() (<AND> RelationalLessExp() #And(2))*
}

void RelationalLessExp() #void: {} {
    ArithmeticAdditiveExp() (<LESS> ArithmeticAdditiveExp() #LessThan(2))*
}

void ArithmeticAdditiveExp() #void: {} {
    ArithmeticMultiplicativeExp() (<PLUS> ArithmeticMultiplicativeExp() #Add(2) | <MINUS> ArithmeticMultiplicativeExp() #Sub(2))*
}

void ArithmeticMultiplicativeExp() #void: {} {
    LogicalNotExp() (<MUL> LogicalNotExp() #Mul(2) | <DIV> LogicalNotExp() #Div(2))*
}

void LogicalNotExp() #void: {} {
    <NOT> LogicalNotExp() #Not(1) | AccessExp()
}

void AccessExp() #void: {Token t;} {
    t=TerminalExp() (ArrayAccess() #ArrayAccess(2) | <DOT> DotExp() {jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Dot(2))*
}

void DotExp() #void: {} {
    <LENGTH> #Length | CallWithParams() #Method
}

void ArrayAccess() #void: {} {
    <LSQRBRACKET> Expression() <RSQRBRACKET>
}

void CallWithParams() #void: {Token t;} {
        Identifier() Params() #Params
}

Token TerminalExp() #void: {Token t;} {
    t=<INTEGER_LITERAL> {jjtThis.put(VALUE, t.image); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Int {return t;}
    | t=<TRUE> {jjtThis.put(VALUE, "true"); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Bool {return t;}
    | t=<FALSE> {jjtThis.put(VALUE, "false"); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Bool {return t;}
    | t=<THIS> {jjtThis.put(VALUE, "this"); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #This {return t;}
    | t=Identifier() {return t;}
    | t=<NEW> NewInstance() #New {return t;}
    | t=<LPAR> Expression() <RPAR> {return t;}
}

Token Identifier() #void: {Token t;} {
    t=<IDENTIFIER> {jjtThis.put(VALUE, t.image); jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Identifier {return t;}
}

void NewInstance() #void: {Token t;} {
    <INT> <LSQRBRACKET> Expression() <RSQRBRACKET> #ArrayInit(1)
    | t=Identifier() Params() #Params {jjtThis.put(LINE,  String.valueOf(t.beginLine)); jjtThis.put(COLUMN, String.valueOf(t.beginColumn));} #Object
}

void Params() #void: {} {
    <LPAR> [Expression() #Param(true) (<COMMA> Expression() #Param(true))*] <RPAR>
}
