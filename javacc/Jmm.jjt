options {
    LOOKAHEAD = 1;
}

PARSER_BEGIN(Jmm)
    import java.util.Scanner;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;

    public class Jmm {
        public static void main(String args[]) throws ParseException, FileNotFoundException {
            Scanner scanner = new Scanner(System.in);
            String filename = scanner.nextLine();

            File file = new File(filename);
            FileInputStream fileStream = new FileInputStream(file);

            Jmm parser = new Jmm(fileStream);
            parser.Program();
        }
    }
PARSER_END(Jmm)

SKIP: {
    " " | "\t" | "\r" | "\n"
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >  /*multiline comment*/
    | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //inline comment
}

/*Reserved Words*/
TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE: "true" >
    | <FALSE: "false" >
    | <THIS: "this">
    | <NEW: "new">
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COMMA: ",">
    | < LBRACKET: "{">
    | < RBRACKET: "}">
    | < LSQRBRACKET: "[">
    | < RSQRBRACKET: "]">
    | < LPAR: "(">
    | < RPAR: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <PLUS: "+">
    | <MINUS: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <AND: "&&">
    | <NOT: "!">
    | <EQUALS: "=">
}

TOKEN: {
   <IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >

   | < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> >
   | < #DECIMAL: (["0"-"9"])+ >
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ >
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ >
   | < #OCTAL: "0"(["0"-"7"])* >
}

void Program(): { } {
    ImportDeclaration() ClassDeclaration() <EOF>
}

void Identifier() : {Token id;} {
    id=<IDENTIFIER> {System.out.print(id.image + " | ");}
}

void ImportDeclaration() : {} {
    (<IMPORT> ImportStatement() <SEMICOLON>)*
}

void ImportStatement() : {} {
    Identifier() (<DOT> Identifier())*
}

void ClassDeclaration(): {} {
    <CLASS> ClassBody() <LBRACKET> (VarDeclaration())* (MethodDeclaration())* <RBRACKET>
}

void ClassBody(): {} {
    Identifier() [<EXTENDS> Identifier()]
}

void VarDeclaration() : {} {
    Type() Identifier() <SEMICOLON>
}

void MethodDeclaration() : { } {
    <PUBLIC> (MainDeclaration() | RegularMethodDeclaration())
}

void MainDeclaration() : {} {
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LSQRBRACKET> <RSQRBRACKET> Identifier() <RPAR> <LBRACKET>
        MethodBody()
    <RBRACKET>
}

void RegularMethodDeclaration()  : {} {
    MethodName() <LPAR> [Type() Identifier()  (<COMMA> Type() Identifier())*] <RPAR> <LBRACKET>
        MethodBody()
        <RETURN> Expression() <SEMICOLON>
    <RBRACKET>
}

void MethodName(): {} {
    Type() Identifier()
}

void MethodBody(): {} {
    (LOOKAHEAD(2) VarDeclaration())* (Statement())* // TODO: remove LOOKAHEAD(2)
}

void Type() : {} {
    TypeNotIdentifier() | Identifier()
}

void TypeNotIdentifier() : {} {
    <BOOLEAN> | <INT> [<LSQRBRACKET> <RSQRBRACKET> ]
}

void Statement() : {} {
    <LBRACKET> (Statement())* <RBRACKET>
    | IfStatement()
    | WhileStatement()
    | Expression() <SEMICOLON>
    | Identifier() [ArrayAccess()] <EQUALS> Expression() <SEMICOLON>
}

void IfStatement() : {} {
    <IF> <LPAR> Expression() <RPAR> Statement() <ELSE> Statement()
}

void WhileStatement() : {} {
    <WHILE> <LPAR> Expression() <RPAR> Statement()
}

/* *
* EXPRESSION:
* https://introcs.cs.princeton.edu/java/11precedence/ -> Operators
* Operators listed in a javacc file go from the ones with least precedence to the ones with most precedence (from top to bottom)
* */
void Expression() : {} {
    LogicalAndExp()
}

void LogicalAndExp() : {} {
    RelationalLessExp() (<AND> RelationalLessExp())*
}

void RelationalLessExp() : {} {
    ArithmeticAdditiveExp() (<LESS> ArithmeticAdditiveExp())*
}

void ArithmeticAdditiveExp() : {} {
    ArithmeticMultiplicativeExp() (<PLUS> ArithmeticMultiplicativeExp() | <MINUS> ArithmeticMultiplicativeExp())*
}

void ArithmeticMultiplicativeExp() : {} {
    LogicalNotExp() (<MUL> LogicalNotExp() | <DIV> LogicalNotExp())*
}

void LogicalNotExp() : {} {
    AccessExp() | (<NOT> LogicalNotExp())
}

void AccessExp() : {} {
    TerminalExp() (ArrayAccess() | <DOT> DotExp())*
}

void DotExp() : {} {
    <LENGTH> | Identifier() <LPAR> [Expression() ( <COMMA> Expression())* ] <RPAR>
}

void TerminalExp() : {} {
    <INTEGER_LITERAL>
    | <TRUE>
    | <FALSE>
    | <THIS>
    | Identifier()
    | NewInstance()
    | <LPAR> Expression() <RPAR>
}

void NewInstance() : {} {
    <NEW> (NewIntObject() | CallWithParams()) // new int[] | new Identifier(Param1, Param2, ...)
}

void NewIntObject() : {} {
    <INT> ArrayAccess()
}

void ArrayAccess() : {} {
    <LSQRBRACKET> Expression() <RSQRBRACKET>
}

void CallWithParams(): {} {
    Identifier() Params()
}

void Params() : {} {
    <LPAR> [Expression() (<COMMA> Expression())*] <RPAR>
}
