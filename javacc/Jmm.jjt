options {
    LOOKAHEAD = 1;
    STATIC = false;
}

PARSER_BEGIN(Jmm)
    import java.util.*;
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;

    public class Jmm {
        static final int MAX_NUM_ERRORS = 10;
        private int errno = 0;

        public static void main(String args[]) throws Exception { }

        public void processWhileError(ParseException e) {
            if ((this.errno++) > Jmm.MAX_NUM_ERRORS) {
                throw new RuntimeException(String.format("Too many errors(%d). Aborting....", MAX_NUM_ERRORS));
            }

            Token currentToken = e.currentToken;
            Token errorToken = currentToken.next;
            System.err.println(String.format("Error(%d) detected during parsing of while expression. Unexpected token '%s' ....", this.errno, errorToken));
            System.err.println("Error Details:");
            System.err.println(String.format("\tBegin Line: %d \t Begin Column: %d \t End Line: %d \t End Column: %d", errorToken.beginLine, errorToken.beginColumn, errorToken.endLine, errorToken.endColumn));
            System.err.println(getErrorMessage(currentToken, e.expectedTokenSequences, e.tokenImage));
            System.err.println("------------------------------------------------------------------------");
            recoverFromWhile();
        }

        // From ParseException
        private static String getErrorMessage(Token currentToken,  int[][] expectedTokenSequences, String[] tokenImage) {
            String eol = System.getProperty("line.separator", "\n");
            StringBuffer expected = new StringBuffer();
            int maxSize = 0;

            for (int i = 0; i < expectedTokenSequences.length; i++) {
                if (maxSize < expectedTokenSequences[i].length) {
                    maxSize = expectedTokenSequences[i].length;
                }
                for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                    expected.append(tokenImage[expectedTokenSequences[i][j]]);
                }
                if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
                    expected.append(" ...");
                }
                expected.append(eol).append("    ");
            }

            String message = "";
            if (expectedTokenSequences.length == 1) {
                message += "Was expecting:" + eol + "    ";
            } else {
                message += "Was expecting one of:" + eol + "    ";
            }
            message += expected.toString();
            return message;
          }

        public void recoverFromWhile() {
            Token t = getToken(0);
            do {
                if(t.kind == RPAR && getToken(1).kind != RPAR) { // If it finds the last ")"
                    return;
                } else if(getToken(1).kind == LBRACKET) { // If it finds the first "{"
                    return;
                }
                t = getNextToken();
            } while (true);
        }
    }
PARSER_END(Jmm)

SKIP: {
    " " | "\t" | "\r" | "\n"
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >  /*multiline comment*/
    | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //inline comment
}

/*Reserved Words*/
TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE: "true" >
    | <FALSE: "false" >
    | <THIS: "this">
    | <NEW: "new">
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COMMA: ",">
    | < LBRACKET: "{">
    | < RBRACKET: "}">
    | < LSQRBRACKET: "[">
    | < RSQRBRACKET: "]">
    | < LPAR: "(">
    | < RPAR: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <PLUS: "+">
    | <MINUS: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <AND: "&&">
    | <NOT: "!">
    | <EQUALS: "=">
}

TOKEN: {
   <IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >

   | < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> >
   | < #DECIMAL: (["0"-"9"])+ >
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ >
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ >
   | < #OCTAL: "0"(["0"-"7"])* >
}

SimpleNode Program(): { } {
    ImportDeclaration() ClassDeclaration() {
        if (this.errno > 0) throw new RuntimeException(String.format("Too many errors(%d). Aborting....", MAX_NUM_ERRORS));
        return jjtThis;
    }
}

void Identifier() : {} {
    <IDENTIFIER>
}

void ImportDeclaration() : {} {
    (<IMPORT> ImportStatement() <SEMICOLON>)*
}

void ImportStatement() : {} {
    Identifier() (<DOT> Identifier())*
}

void ClassDeclaration(): {} {
    <CLASS> ClassBody() <LBRACKET> (VarDeclaration())* (MethodDeclaration())* <RBRACKET>
}

void ClassBody(): {} {
    Identifier() [<EXTENDS> Identifier()]
}

void VarDeclaration() : {} {
    Type() Identifier() <SEMICOLON>
}

void MethodDeclaration() : { } {
    <PUBLIC> (MainDeclaration() | RegularMethodDeclaration())
}

void MainDeclaration() : {} {
    <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LSQRBRACKET> <RSQRBRACKET> Identifier() <RPAR> <LBRACKET>
        MethodBody()
    <RBRACKET>
}

void RegularMethodDeclaration()  : {} {
    MethodName() <LPAR> [Type() Identifier()  (<COMMA> Type() Identifier())*] <RPAR> <LBRACKET>
        MethodBody()
        <RETURN> Expression() <SEMICOLON>
    <RBRACKET>
}

void MethodName(): {} {
    Type() Identifier()
}

void MethodBody(): {} {
    (LOOKAHEAD(2) VarDeclaration())* (Statement())*
}

void Type() : {} {
    TypeNotIdentifier() | Identifier()
}

void TypeNotIdentifier() : {} {
    <BOOLEAN> | <INT> [<LSQRBRACKET> <RSQRBRACKET> ]
}

void Statement() : {} {
    <LBRACKET> (Statement())* <RBRACKET>
    | IfStatement()
    | WhileStatement()
    | (LOOKAHEAD(2) Identifier() [ArrayAccess()] <EQUALS> Expression() |  Expression()) <SEMICOLON>
}

void IfStatement() : {} {
    <IF> <LPAR> Expression() <RPAR> Statement() <ELSE> Statement()
}

/* *
* While Recovery
* https://www.cs.purdue.edu/homes/hosking/javacc/doc/errorrecovery.html
* https://www.cs.purdue.edu/homes/hosking/javacc/doc/apiroutines.html
* */
void WhileStatement() : {} {
    <WHILE>
    try {
        <LPAR> Expression() <RPAR>
    } catch (ParseException e) {
        processWhileError(e);
    }
    Statement()
}

/* *
* EXPRESSION:
* https://introcs.cs.princeton.edu/java/11precedence/ -> Operators
* Operators listed in a javacc file go from the ones with least precedence to the ones with most precedence (from top to bottom)
* */
void Expression() : {} {
    LogicalAndExp()
}

void LogicalAndExp() : {} {
    RelationalLessExp() (<AND> RelationalLessExp())*
}

void RelationalLessExp() : {} {
    ArithmeticAdditiveExp() (<LESS> ArithmeticAdditiveExp())*
}

void ArithmeticAdditiveExp() : {} {
    ArithmeticMultiplicativeExp() (<PLUS> ArithmeticMultiplicativeExp() | <MINUS> ArithmeticMultiplicativeExp())*
}

void ArithmeticMultiplicativeExp() : {} {
    LogicalNotExp() (<MUL> LogicalNotExp() | <DIV> LogicalNotExp())*
}

void LogicalNotExp() : {} {
    (<NOT>)* AccessExp()
}

void AccessExp() : {} {
    TerminalExp() (ArrayAccess() | <DOT> DotExp())*
}

void DotExp() : {} {
    <LENGTH> | CallWithParams()
}

void TerminalExp() : {} {
    <INTEGER_LITERAL>
    | <TRUE>
    | <FALSE>
    | <THIS>
    | Identifier()
    | NewInstance()
    | <LPAR> Expression() <RPAR>
}

void NewInstance() : {} {
    <NEW> (NewIntObject() | CallWithParams()) // new int[] | new Identifier(Param1, Param2, ...)
}

void NewIntObject() : {} {
    <INT> ArrayAccess()
}

void ArrayAccess() : {} {
    <LSQRBRACKET> Expression() <RSQRBRACKET>
}

void CallWithParams(): {} {
    Identifier() Params()
}

void Params() : {} {
    <LPAR> [Expression() (<COMMA> Expression())*] <RPAR>
}
