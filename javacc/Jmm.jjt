options {
    LOOKAHEAD = 1;
    STATIC = false;
}

PARSER_BEGIN(Jmm)
import java.util.ArrayList;
import java.util.List;
import pt.up.fe.comp.jmm.report.Report;
import pt.up.fe.comp.jmm.report.Stage;
import pt.up.fe.comp.jmm.report.ReportType;

public class Jmm {
    private final List<Report> reports = new ArrayList<Report>();
    public static void main(String args[]) { }

    public void processWhileError(ParseException e) {
        Token currentToken = e.currentToken;
        Token errorToken = currentToken.next;
        this.reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, errorToken.beginLine, errorToken.endLine, getErrorMessage(this.reports.size(), errorToken, e.expectedTokenSequences, e.tokenImage)));
        recoverFromWhile();
    }

    public static String getErrorMessage(int errno, Token token,  int[][] expectedTokenSequences, String[] tokenImage) {
        int maxSize = 0;
        StringBuilder expected = new StringBuilder("\t\t");

        for (int i = 0; i < expectedTokenSequences.length; i++) {
            if (maxSize < expectedTokenSequences[i].length) {
                maxSize = expectedTokenSequences[i].length;
            }
            for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                expected.append(tokenImage[expectedTokenSequences[i][j]]);
            }

            if(i != expectedTokenSequences.length - 1) {
                expected.append(" | ");
            } else {
                expected.append("\n");
            }
        }

        String info = String.format("%s\n%s\n%s",
            String.format("Error(%d) detected during parsing process. Unexpected token '%s' ....", errno, token),
            "\tError Details:",
            String.format("\t\tLine: %d \t Column: %d", token.beginLine, token.beginColumn)
        );

        return String.format("%s\n%s\n%s", info, "\tWas expecting:", expected);
      }

    public void recoverFromWhile() {
        Token t = getToken(0);
        do {
            if(t.kind == RPAR && getToken(1).kind != RPAR) { // If it finds the last ")"
                return;
            } else if(getToken(1).kind == LBRACKET) { // If it finds the first "{"
                return;
            }
            t = getNextToken();
        } while (true);
    }

    public List<Report> getReports() {
        return this.reports;
    }
}
PARSER_END(Jmm)

SKIP: {
    " " | "\t" | "\r" | "\n"
    | < "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >  /*multiline comment*/
    | < "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //inline comment
}

/*Reserved Words*/
TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class" >
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE: "true" >
    | <FALSE: "false" >
    | <THIS: "this">
    | <NEW: "new">
}

/* Delimitaters*/
TOKEN : {
    < SEMICOLON: ";">
    | < COMMA: ",">
    | < LBRACKET: "{">
    | < RBRACKET: "}">
    | < LSQRBRACKET: "[">
    | < RSQRBRACKET: "]">
    | < LPAR: "(">
    | < RPAR: ")">
    | < DOT: ".">
}

/*Operators*/
TOKEN : {
    <PLUS: "+">
    | <MINUS: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <AND: "&&">
    | <NOT: "!">
    | <EQUALS: "=">
}

TOKEN: {
   <IDENTIFIER: ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])* >

   | < INTEGER_LITERAL : <DECIMAL> | <HEXADECIMAL> | <BINARY> | <OCTAL> >
   | < #DECIMAL: (["0"-"9"])+ >
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ >
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ >
   | < #OCTAL: "0"(["0"-"7"])* >
}

SimpleNode Program(): { } {
    ImportDeclaration() ClassDeclaration() #Class { return jjtThis; }
}

void ImportDeclaration() #void: {} {
    (<IMPORT> ImportStatement() #Import <SEMICOLON>)*
}

void ImportStatement() #void: {} {
    Import() (<DOT>Import())*
}

Token Import() #void: {Token t;} {
    t=<IDENTIFIER> {jjtThis.put("VALUE", t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #ImportName {return t;}
}

void ClassDeclaration() #void: {} {
    <CLASS> ClassBody() <LBRACKET> (VarDeclaration() #ClassVar)* (MethodDeclaration())* <RBRACKET>
}

void ClassBody() #void: {} {
    Name() [<EXTENDS> Name()]
}

void VarDeclaration() #void: {} {
    Type() Name() <SEMICOLON>
}

void MethodDeclaration() #void: { } {
    <PUBLIC> (MainDeclaration()#Main | RegularMethodDeclaration()#Method)
}

void MainDeclaration() #void: {Token t;} {
    <STATIC> <VOID> <MAIN> <LPAR> (t=<STRING> {
        jjtThis.put("VALUE",  t.image);
        jjtThis.put("LINE",  String.valueOf(t.beginLine));
        jjtThis.put("COLUMN", String.valueOf(t.beginColumn));
    } #ClassName <LSQRBRACKET> <RSQRBRACKET>#Array(1) Name())#MethodParam(2) <RPAR>#MethodParameters(1) <LBRACKET>
        MethodBody()
    <RBRACKET>
}

void RegularMethodDeclaration() #void: {} {
    Type() Name() <LPAR> [MethodParameters()] <RPAR> <LBRACKET>
        MethodBody()
        <RETURN> Expression()#Return <SEMICOLON>
    <RBRACKET>
}

void MethodParameters() : {} {
    MethodParam() (<COMMA> MethodParam())*
}

void MethodParam() : {} {
    Type() Name()
}

void MethodBody() #void: {} {
    (LOOKAHEAD(2) VarDeclaration() #MethodVar)* (Statement())*
}

void Type() #void: {Token t;} {
    t=<BOOLEAN> {jjtThis.put("VALUE",  t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Boolean
    | t=<INT> {jjtThis.put("VALUE",  t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Int [<LSQRBRACKET> <RSQRBRACKET> #Array(1) ]
    | t=<IDENTIFIER> {jjtThis.put("VALUE",  t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #ClassName
}

void Statement() #void: {} {
    <LBRACKET> (Statement())* #StatementBlock <RBRACKET>
    | IfStatement()
    | WhileStatement()
    | AssignOrExpression() <SEMICOLON>
}

void IfStatement() #void: {Token t;} {
    <IF> t=<LPAR> Expression() <RPAR> Statement() <ELSE> Statement()
    {jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #If(3)
}

/* *
* While Recovery
* https://www.cs.purdue.edu/homes/hosking/javacc/doc/errorrecovery.html
* https://www.cs.purdue.edu/homes/hosking/javacc/doc/apiroutines.html
* */
void WhileStatement() #void: {Token t;} {
    t=<WHILE>
    try {
        t=<LPAR> Expression() <RPAR>
    } catch (ParseException e) {
        processWhileError(e);
    }
    Statement() {jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #While(2)
}

/* *
* EXPRESSION:
* https://introcs.cs.princeton.edu/java/11precedence/ -> Operators
* Operators listed in a javacc file go from the ones with least precedence to the ones with most precedence (from top to bottom)
* */
void Expression() #void: {} {
    LogicalAndExp()
}

void LogicalAndExp() #void: {} {
    RelationalLessExp() (<AND> RelationalLessExp() #LogicalAnd(2))*
}

void RelationalLessExp() #void: {} {
    ArithmeticAdditiveExp() (<LESS> ArithmeticAdditiveExp() #Less(2))*
}

void ArithmeticAdditiveExp() #void: {} {
    ArithmeticMultiplicativeExp() (<PLUS> ArithmeticMultiplicativeExp() #Add(2) | <MINUS> ArithmeticMultiplicativeExp() #Sub(2))*
}

void ArithmeticMultiplicativeExp() #void: {} {
    LogicalNotExp() (<MUL> LogicalNotExp() #Mul(2) | <DIV> LogicalNotExp() #Div(2))*
}

void LogicalNotExp() #void: {} {
    (<NOT> AccessExp() #Not)+ | AccessExp()
}

void AccessExp() #void: {Token t;} {
    t=TerminalExp() (ArrayAccess() #ArrayAccess(2) | <DOT> DotExp() {jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Dot(2))*
}

void DotExp() #void: {} {
    <LENGTH> #Length | CallWithParams() #Method
}

void ArrayAccess() #void: {} {
    <LSQRBRACKET> Expression() #Index <RSQRBRACKET>
}

void CallWithParams() #void: {} {
    Name() Params()#Params
}

Token TerminalExp() #void: {Token t;} {
    t=<INTEGER_LITERAL> {jjtThis.put("VALUE", t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #IntegerVal {return t;}
    | t=<TRUE> {jjtThis.put("VALUE", "true"); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Bool {return t;}
    | t=<FALSE> {jjtThis.put("VALUE", "false"); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Bool {return t;}
    | t=<THIS> {jjtThis.put("VALUE", "this"); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #This {return t;}
    | t=Var() {return t;}
    | t=<NEW> NewInstance() #New {return t;}
    | t=<LPAR> Expression() #Important <RPAR> {return t;}
}

void AssignOrExpression() #void: {Token t;} {
    t=<INTEGER_LITERAL> {jjtThis.put("VALUE", t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #IntegerVal Operations()
    | t=<TRUE> {jjtThis.put("VALUE", "true"); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Bool Operations()
    | t=<FALSE> {jjtThis.put("VALUE", "false"); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Bool Operations()
    | t=<THIS> {jjtThis.put("VALUE", "this"); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #This Operations()
    | Var()  ArrayAccessExpressionOrAssign()
    | <NEW> NewInstance() #New
    | <LPAR> Expression() #Important <RPAR>
    | <NOT> LogicalNotExp() #Not
}

void ArrayAccessExpressionOrAssign() #void: {Token t;} {
    //Ignore warning, match with first ArrayAccess
    [LOOKAHEAD(1) ArrayAccess() #ArrayAccess(2)] (<EQUALS> Expression()#Assign(2) | Operations() (ArrayAccess() #ArrayAccess(2))*)
}

void Operations() #void: {} {
    RelationalLessOp() (<AND> RelationalLessOp() #LogicalAnd(2))*
}

void RelationalLessOp() #void: {} {
    ArithmeticAdditiveOp() (<LESS> ArithmeticAdditiveOp() #Less(2))*
}

void ArithmeticAdditiveOp() #void: {} {
    ArithmeticMultiplicativeOp() (<PLUS> ArithmeticMultiplicativeOp() #Add(2))* (<MINUS> ArithmeticMultiplicativeOp() #Sub(2))*
}

void ArithmeticMultiplicativeOp() #void: {} {
    AccessOp() (<MUL> AccessOp() #Mul(2))* (<DIV> AccessOp() #Div(2))*
}

void AccessOp() #void: {Token t;} {
    (t=<DOT> DotExp() {jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} #Dot(2))*
}

Token Var(): {Token t;} {
    t=<IDENTIFIER> {jjtThis.put("VALUE", t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} {return t;}
}

Token Name(): {Token t;} {
    t=<IDENTIFIER> {jjtThis.put("VALUE", t.image); jjtThis.put("LINE",  String.valueOf(t.beginLine)); jjtThis.put("COLUMN", String.valueOf(t.beginColumn));} {return t;}
}

void NewInstance() #void: {} {
    <INT> <LSQRBRACKET> Expression() #Size <RSQRBRACKET> #IntArray(1)
        | CallWithParams() #Object // new int[] | new Identifier(Param1, Param2, ...)
}

void Params() #void: {} {
    <LPAR> [Expression() #Param(1) (<COMMA> Expression() #Param(1))*] <RPAR>
}
