Life {
	.field private xMax.i32;
	.field private UNDERPOP_LIM.i32;
	.field private OVERPOP_LIM.i32;
	.field private REPRODUCE_NUM.i32;
	.field private LOOPS_PER_MS.i32;
	.field private yMax.i32;
	.field private field.array.i32;

	.construct Life().V {
		invokespecial(this, "<init>").V;
	}

	.method public main(a.array.String).V {
		t17.Life :=.Life new(Life).Life;
		invokespecial(t17.Life,"<init>").V;
		l.Life :=.Life t17.Life;
		invokevirtual(l.Life, "init").bool;
		While1:
			if (true.bool &&.bool true.bool) goto Loop1;
			goto EndWhile1;
		Loop1:
			invokevirtual(l.Life, "printField").bool;
			invokevirtual(l.Life, "update").bool;
			t18.i32 :=.i32 invokestatic(io, "read").i32;
			unused.i32 :=.i32 t18.i32;
			goto While1;
		EndWhile1:
		ret.V;
	}

	.method public init().bool {
		t19.array.i32 :=.array.i32 new(array, 1.i32).array.i32;
		lineLenA.array.i32 :=.array.i32 t19.array.i32;
		putfield(this, UNDERPOP_LIM.i32, 2.i32).V;
		putfield(this, OVERPOP_LIM.i32, 3.i32).V;
		putfield(this, REPRODUCE_NUM.i32, 3.i32).V;
		putfield(this, LOOPS_PER_MS.i32, 225000.i32).V;
		t20.array.i32 :=.array.i32 invokevirtual(this, "field", lineLenA.array.i32).array.i32;
		putfield(this, field.array.i32, t20.array.i32).V;
		t21.i32 :=.i32 0.i32;
		t22.i32 :=.i32 lineLenA[t21.i32].i32;
		lineLen.i32 :=.i32 t22.i32;
		t23.i32 :=.i32 lineLen.i32 -.i32 1.i32;
		putfield(this, xMax.i32, t23.i32).V;
		t24.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
		t25.i32 :=.i32 arraylength(t24.array.i32).i32;
		t26.i32 :=.i32 t25.i32 /.i32 lineLen.i32;
		t27.i32 :=.i32 t26.i32 -.i32 1.i32;
		putfield(this, yMax.i32, t27.i32).V;
		ret.bool true.bool;
	}

	.method public field(lineLen.array.i32).array.i32 {
		t28.array.i32 :=.array.i32 new(array, 100.i32).array.i32;
		field.array.i32 :=.array.i32 t28.array.i32;
		t29.i32 :=.i32 0.i32;
		$0.lineLen[t29.i32].i32 :=.i32 10.i32;
		t30.i32 :=.i32 0.i32;
		field[t30.i32].i32 :=.i32 0.i32;
		t31.i32 :=.i32 1.i32;
		field[t31.i32].i32 :=.i32 0.i32;
		t32.i32 :=.i32 2.i32;
		field[t32.i32].i32 :=.i32 1.i32;
		t33.i32 :=.i32 3.i32;
		field[t33.i32].i32 :=.i32 0.i32;
		t34.i32 :=.i32 4.i32;
		field[t34.i32].i32 :=.i32 0.i32;
		t35.i32 :=.i32 5.i32;
		field[t35.i32].i32 :=.i32 0.i32;
		t36.i32 :=.i32 6.i32;
		field[t36.i32].i32 :=.i32 0.i32;
		t37.i32 :=.i32 7.i32;
		field[t37.i32].i32 :=.i32 0.i32;
		t38.i32 :=.i32 8.i32;
		field[t38.i32].i32 :=.i32 0.i32;
		t39.i32 :=.i32 9.i32;
		field[t39.i32].i32 :=.i32 0.i32;
		t40.i32 :=.i32 10.i32;
		field[t40.i32].i32 :=.i32 1.i32;
		t41.i32 :=.i32 11.i32;
		field[t41.i32].i32 :=.i32 0.i32;
		t42.i32 :=.i32 12.i32;
		field[t42.i32].i32 :=.i32 1.i32;
		t43.i32 :=.i32 13.i32;
		field[t43.i32].i32 :=.i32 0.i32;
		t44.i32 :=.i32 14.i32;
		field[t44.i32].i32 :=.i32 0.i32;
		t45.i32 :=.i32 15.i32;
		field[t45.i32].i32 :=.i32 0.i32;
		t46.i32 :=.i32 16.i32;
		field[t46.i32].i32 :=.i32 0.i32;
		t47.i32 :=.i32 17.i32;
		field[t47.i32].i32 :=.i32 0.i32;
		t48.i32 :=.i32 18.i32;
		field[t48.i32].i32 :=.i32 0.i32;
		t49.i32 :=.i32 19.i32;
		field[t49.i32].i32 :=.i32 0.i32;
		t50.i32 :=.i32 20.i32;
		field[t50.i32].i32 :=.i32 0.i32;
		t51.i32 :=.i32 21.i32;
		field[t51.i32].i32 :=.i32 1.i32;
		t52.i32 :=.i32 22.i32;
		field[t52.i32].i32 :=.i32 1.i32;
		t53.i32 :=.i32 23.i32;
		field[t53.i32].i32 :=.i32 0.i32;
		t54.i32 :=.i32 24.i32;
		field[t54.i32].i32 :=.i32 0.i32;
		t55.i32 :=.i32 25.i32;
		field[t55.i32].i32 :=.i32 0.i32;
		t56.i32 :=.i32 26.i32;
		field[t56.i32].i32 :=.i32 0.i32;
		t57.i32 :=.i32 27.i32;
		field[t57.i32].i32 :=.i32 0.i32;
		t58.i32 :=.i32 28.i32;
		field[t58.i32].i32 :=.i32 0.i32;
		t59.i32 :=.i32 29.i32;
		field[t59.i32].i32 :=.i32 0.i32;
		t60.i32 :=.i32 30.i32;
		field[t60.i32].i32 :=.i32 0.i32;
		t61.i32 :=.i32 31.i32;
		field[t61.i32].i32 :=.i32 0.i32;
		t62.i32 :=.i32 32.i32;
		field[t62.i32].i32 :=.i32 0.i32;
		t63.i32 :=.i32 33.i32;
		field[t63.i32].i32 :=.i32 0.i32;
		t64.i32 :=.i32 34.i32;
		field[t64.i32].i32 :=.i32 0.i32;
		t65.i32 :=.i32 35.i32;
		field[t65.i32].i32 :=.i32 0.i32;
		t66.i32 :=.i32 36.i32;
		field[t66.i32].i32 :=.i32 0.i32;
		t67.i32 :=.i32 37.i32;
		field[t67.i32].i32 :=.i32 0.i32;
		t68.i32 :=.i32 38.i32;
		field[t68.i32].i32 :=.i32 0.i32;
		t69.i32 :=.i32 39.i32;
		field[t69.i32].i32 :=.i32 0.i32;
		t70.i32 :=.i32 40.i32;
		field[t70.i32].i32 :=.i32 0.i32;
		t71.i32 :=.i32 41.i32;
		field[t71.i32].i32 :=.i32 0.i32;
		t72.i32 :=.i32 42.i32;
		field[t72.i32].i32 :=.i32 0.i32;
		t73.i32 :=.i32 43.i32;
		field[t73.i32].i32 :=.i32 0.i32;
		t74.i32 :=.i32 44.i32;
		field[t74.i32].i32 :=.i32 0.i32;
		t75.i32 :=.i32 45.i32;
		field[t75.i32].i32 :=.i32 0.i32;
		t76.i32 :=.i32 46.i32;
		field[t76.i32].i32 :=.i32 0.i32;
		t77.i32 :=.i32 47.i32;
		field[t77.i32].i32 :=.i32 0.i32;
		t78.i32 :=.i32 48.i32;
		field[t78.i32].i32 :=.i32 0.i32;
		t79.i32 :=.i32 49.i32;
		field[t79.i32].i32 :=.i32 0.i32;
		t80.i32 :=.i32 50.i32;
		field[t80.i32].i32 :=.i32 0.i32;
		t81.i32 :=.i32 51.i32;
		field[t81.i32].i32 :=.i32 0.i32;
		t82.i32 :=.i32 52.i32;
		field[t82.i32].i32 :=.i32 0.i32;
		t83.i32 :=.i32 53.i32;
		field[t83.i32].i32 :=.i32 0.i32;
		t84.i32 :=.i32 54.i32;
		field[t84.i32].i32 :=.i32 0.i32;
		t85.i32 :=.i32 55.i32;
		field[t85.i32].i32 :=.i32 0.i32;
		t86.i32 :=.i32 56.i32;
		field[t86.i32].i32 :=.i32 0.i32;
		t87.i32 :=.i32 57.i32;
		field[t87.i32].i32 :=.i32 0.i32;
		t88.i32 :=.i32 58.i32;
		field[t88.i32].i32 :=.i32 0.i32;
		t89.i32 :=.i32 59.i32;
		field[t89.i32].i32 :=.i32 0.i32;
		t90.i32 :=.i32 60.i32;
		field[t90.i32].i32 :=.i32 0.i32;
		t91.i32 :=.i32 61.i32;
		field[t91.i32].i32 :=.i32 0.i32;
		t92.i32 :=.i32 62.i32;
		field[t92.i32].i32 :=.i32 0.i32;
		t93.i32 :=.i32 63.i32;
		field[t93.i32].i32 :=.i32 0.i32;
		t94.i32 :=.i32 64.i32;
		field[t94.i32].i32 :=.i32 0.i32;
		t95.i32 :=.i32 65.i32;
		field[t95.i32].i32 :=.i32 0.i32;
		t96.i32 :=.i32 66.i32;
		field[t96.i32].i32 :=.i32 0.i32;
		t97.i32 :=.i32 67.i32;
		field[t97.i32].i32 :=.i32 0.i32;
		t98.i32 :=.i32 68.i32;
		field[t98.i32].i32 :=.i32 0.i32;
		t99.i32 :=.i32 69.i32;
		field[t99.i32].i32 :=.i32 0.i32;
		t100.i32 :=.i32 70.i32;
		field[t100.i32].i32 :=.i32 0.i32;
		t101.i32 :=.i32 71.i32;
		field[t101.i32].i32 :=.i32 0.i32;
		t102.i32 :=.i32 72.i32;
		field[t102.i32].i32 :=.i32 0.i32;
		t103.i32 :=.i32 73.i32;
		field[t103.i32].i32 :=.i32 0.i32;
		t104.i32 :=.i32 74.i32;
		field[t104.i32].i32 :=.i32 0.i32;
		t105.i32 :=.i32 75.i32;
		field[t105.i32].i32 :=.i32 0.i32;
		t106.i32 :=.i32 76.i32;
		field[t106.i32].i32 :=.i32 0.i32;
		t107.i32 :=.i32 77.i32;
		field[t107.i32].i32 :=.i32 0.i32;
		t108.i32 :=.i32 78.i32;
		field[t108.i32].i32 :=.i32 0.i32;
		t109.i32 :=.i32 79.i32;
		field[t109.i32].i32 :=.i32 0.i32;
		t110.i32 :=.i32 80.i32;
		field[t110.i32].i32 :=.i32 0.i32;
		t111.i32 :=.i32 81.i32;
		field[t111.i32].i32 :=.i32 0.i32;
		t112.i32 :=.i32 82.i32;
		field[t112.i32].i32 :=.i32 0.i32;
		t113.i32 :=.i32 83.i32;
		field[t113.i32].i32 :=.i32 0.i32;
		t114.i32 :=.i32 84.i32;
		field[t114.i32].i32 :=.i32 0.i32;
		t115.i32 :=.i32 85.i32;
		field[t115.i32].i32 :=.i32 0.i32;
		t116.i32 :=.i32 86.i32;
		field[t116.i32].i32 :=.i32 0.i32;
		t117.i32 :=.i32 87.i32;
		field[t117.i32].i32 :=.i32 0.i32;
		t118.i32 :=.i32 88.i32;
		field[t118.i32].i32 :=.i32 0.i32;
		t119.i32 :=.i32 89.i32;
		field[t119.i32].i32 :=.i32 0.i32;
		t120.i32 :=.i32 90.i32;
		field[t120.i32].i32 :=.i32 0.i32;
		t121.i32 :=.i32 91.i32;
		field[t121.i32].i32 :=.i32 0.i32;
		t122.i32 :=.i32 92.i32;
		field[t122.i32].i32 :=.i32 0.i32;
		t123.i32 :=.i32 93.i32;
		field[t123.i32].i32 :=.i32 0.i32;
		t124.i32 :=.i32 94.i32;
		field[t124.i32].i32 :=.i32 0.i32;
		t125.i32 :=.i32 95.i32;
		field[t125.i32].i32 :=.i32 0.i32;
		t126.i32 :=.i32 96.i32;
		field[t126.i32].i32 :=.i32 0.i32;
		t127.i32 :=.i32 97.i32;
		field[t127.i32].i32 :=.i32 0.i32;
		t128.i32 :=.i32 98.i32;
		field[t128.i32].i32 :=.i32 0.i32;
		t129.i32 :=.i32 99.i32;
		field[t129.i32].i32 :=.i32 0.i32;
		ret.array.i32 field.array.i32;
	}

	.method public update().bool {
		t130.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
		t131.i32 :=.i32 arraylength(t130.array.i32).i32;
		t132.array.i32 :=.array.i32 new(array, t131.i32).array.i32;
		newField.array.i32 :=.array.i32 t132.array.i32;
		i.i32 :=.i32 0.i32;
		While2:
			t133.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
			t134.i32 :=.i32 arraylength(t133.array.i32).i32;
			if (i.i32 <.bool t134.i32) goto Loop2;
			goto EndWhile2;
		Loop2:
			t135.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
			t136.i32 :=.i32 t135[i.i32].i32;
			cur.i32 :=.i32 t136.i32;
			t137.i32 :=.i32 invokevirtual(this, "getLiveNeighborN", i.i32).i32;
			neighN.i32 :=.i32 t137.i32;
			t138.bool :=.bool cur.i32 <.bool 1.i32;
			if (t138.bool !.bool t138.bool) goto True4;
				t146.i32 :=.i32 getfield(this, REPRODUCE_NUM.i32).i32;
				t149.bool :=.bool invokevirtual(this, "eq", neighN.i32, t146.i32).bool;
				if (t149.bool &&.bool t149.bool) goto True3;
					t147.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
					t148.i32 :=.i32 t147[i.i32].i32;
					newField[i.i32].i32 :=.i32 t148.i32;
					goto Endif3;
				True3:
					newField[i.i32].i32 :=.i32 1.i32;
				Endif3:
				goto Endif4;
			True4:
				t139.i32 :=.i32 getfield(this, UNDERPOP_LIM.i32).i32;
				t141.bool :=.bool invokevirtual(this, "ge", neighN.i32, t139.i32).bool;
				t140.i32 :=.i32 getfield(this, OVERPOP_LIM.i32).i32;
				t142.bool :=.bool invokevirtual(this, "le", neighN.i32, t140.i32).bool;
				t143.bool :=.bool t141.bool &&.bool t142.bool;
				goodPop.bool :=.bool t143.bool;
				if (goodPop.bool !.bool goodPop.bool) goto True2;
					t144.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
					t145.i32 :=.i32 t144[i.i32].i32;
					newField[i.i32].i32 :=.i32 t145.i32;
					goto Endif2;
				True2:
					newField[i.i32].i32 :=.i32 0.i32;
				Endif2:
			Endif4:
			t150.i32 :=.i32 i.i32 +.i32 1.i32;
			i.i32 :=.i32 t150.i32;
			goto While2;
		EndWhile2:
		putfield(this, field.array.i32, newField.array.i32).V;
		ret.bool true.bool;
	}

	.method public printField().bool {
		i.i32 :=.i32 0.i32;
		j.i32 :=.i32 0.i32;
		While3:
			t151.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
			t152.i32 :=.i32 arraylength(t151.array.i32).i32;
			if (i.i32 <.bool t152.i32) goto Loop3;
			goto EndWhile3;
		Loop3:
			t153.i32 :=.i32 getfield(this, xMax.i32).i32;
			t154.bool :=.bool invokevirtual(this, "gt", j.i32, t153.i32).bool;
			if (t154.bool &&.bool t154.bool) goto True5;
				goto Endif5;
			True5:
				invokestatic(io, "println").V;
				j.i32 :=.i32 0.i32;
			Endif5:
			t155.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
			t156.i32 :=.i32 t155[i.i32].i32;
			invokestatic(io, "print", t156.i32).V;
			t157.i32 :=.i32 i.i32 +.i32 1.i32;
			i.i32 :=.i32 t157.i32;
			t158.i32 :=.i32 j.i32 +.i32 1.i32;
			j.i32 :=.i32 t158.i32;
			goto While3;
		EndWhile3:
		invokestatic(io, "println").V;
		invokestatic(io, "println").V;
		ret.bool true.bool;
	}

	.method public trIdx(x.i32, y.i32).i32 {
		t159.i32 :=.i32 getfield(this, xMax.i32).i32;
		t160.i32 :=.i32 t159.i32 +.i32 1.i32;
		t161.i32 :=.i32 t160.i32 *.i32 $0.y.i32;
		t162.i32 :=.i32 $1.x.i32 +.i32 t161.i32;
		ret.i32 t162.i32;
	}

	.method public cartIdx(absPos.i32).array.i32 {
		t163.i32 :=.i32 getfield(this, xMax.i32).i32;
		t164.i32 :=.i32 t163.i32 +.i32 1.i32;
		xLim.i32 :=.i32 t164.i32;
		t165.i32 :=.i32 $0.absPos.i32 /.i32 xLim.i32;
		y.i32 :=.i32 t165.i32;
		t166.i32 :=.i32 y.i32 *.i32 xLim.i32;
		t167.i32 :=.i32 $0.absPos.i32 -.i32 t166.i32;
		x.i32 :=.i32 t167.i32;
		t168.array.i32 :=.array.i32 new(array, 2.i32).array.i32;
		ret.array.i32 :=.array.i32 t168.array.i32;
		t169.i32 :=.i32 0.i32;
		ret[t169.i32].i32 :=.i32 x.i32;
		t170.i32 :=.i32 1.i32;
		ret[t170.i32].i32 :=.i32 y.i32;
		ret.array.i32 ret.array.i32;
	}

	.method public getNeighborCoords(absPos.i32).array.i32 {
		t171.array.i32 :=.array.i32 invokevirtual(this, "cartIdx", $0.absPos.i32).array.i32;
		cart.array.i32 :=.array.i32 t171.array.i32;
		t172.i32 :=.i32 0.i32;
		t173.i32 :=.i32 cart[t172.i32].i32;
		x.i32 :=.i32 t173.i32;
		t174.i32 :=.i32 1.i32;
		t175.i32 :=.i32 cart[t174.i32].i32;
		y.i32 :=.i32 t175.i32;
		t176.i32 :=.i32 getfield(this, xMax.i32).i32;
		if (x.i32 <.bool t176.i32) goto True7;
			downX.i32 :=.i32 0.i32;
			t181.i32 :=.i32 x.i32 -.i32 1.i32;
			upX.i32 :=.i32 t181.i32;
			goto Endif7;
		True7:
			t177.i32 :=.i32 x.i32 +.i32 1.i32;
			downX.i32 :=.i32 t177.i32;
			t180.bool :=.bool invokevirtual(this, "gt", x.i32, 0.i32).bool;
			if (t180.bool &&.bool t180.bool) goto True6;
				t179.i32 :=.i32 getfield(this, xMax.i32).i32;
				upX.i32 :=.i32 t179.i32;
				goto Endif6;
			True6:
				t178.i32 :=.i32 x.i32 -.i32 1.i32;
				upX.i32 :=.i32 t178.i32;
			Endif6:
		Endif7:
		t182.i32 :=.i32 getfield(this, yMax.i32).i32;
		if (y.i32 <.bool t182.i32) goto True9;
			downY.i32 :=.i32 0.i32;
			t187.i32 :=.i32 y.i32 -.i32 1.i32;
			upY.i32 :=.i32 t187.i32;
			goto Endif9;
		True9:
			t183.i32 :=.i32 y.i32 +.i32 1.i32;
			downY.i32 :=.i32 t183.i32;
			t186.bool :=.bool invokevirtual(this, "gt", y.i32, 0.i32).bool;
			if (t186.bool &&.bool t186.bool) goto True8;
				t185.i32 :=.i32 getfield(this, yMax.i32).i32;
				upY.i32 :=.i32 t185.i32;
				goto Endif8;
			True8:
				t184.i32 :=.i32 y.i32 -.i32 1.i32;
				upY.i32 :=.i32 t184.i32;
			Endif8:
		Endif9:
		t188.array.i32 :=.array.i32 new(array, 8.i32).array.i32;
		ret.array.i32 :=.array.i32 t188.array.i32;
		t189.i32 :=.i32 0.i32;
		t190.i32 :=.i32 invokevirtual(this, "trIdx", x.i32, upY.i32).i32;
		ret[t189.i32].i32 :=.i32 t190.i32;
		t191.i32 :=.i32 1.i32;
		t192.i32 :=.i32 invokevirtual(this, "trIdx", upX.i32, upY.i32).i32;
		ret[t191.i32].i32 :=.i32 t192.i32;
		t193.i32 :=.i32 2.i32;
		t194.i32 :=.i32 invokevirtual(this, "trIdx", upX.i32, y.i32).i32;
		ret[t193.i32].i32 :=.i32 t194.i32;
		t195.i32 :=.i32 3.i32;
		t196.i32 :=.i32 invokevirtual(this, "trIdx", upX.i32, downY.i32).i32;
		ret[t195.i32].i32 :=.i32 t196.i32;
		t197.i32 :=.i32 4.i32;
		t198.i32 :=.i32 invokevirtual(this, "trIdx", x.i32, downY.i32).i32;
		ret[t197.i32].i32 :=.i32 t198.i32;
		t199.i32 :=.i32 5.i32;
		t200.i32 :=.i32 invokevirtual(this, "trIdx", downX.i32, downY.i32).i32;
		ret[t199.i32].i32 :=.i32 t200.i32;
		t201.i32 :=.i32 6.i32;
		t202.i32 :=.i32 invokevirtual(this, "trIdx", downX.i32, y.i32).i32;
		ret[t201.i32].i32 :=.i32 t202.i32;
		t203.i32 :=.i32 7.i32;
		t204.i32 :=.i32 invokevirtual(this, "trIdx", downX.i32, upY.i32).i32;
		ret[t203.i32].i32 :=.i32 t204.i32;
		ret.array.i32 ret.array.i32;
	}

	.method public getLiveNeighborN(absPos.i32).i32 {
		ret.i32 :=.i32 0.i32;
		t205.array.i32 :=.array.i32 invokevirtual(this, "getNeighborCoords", $0.absPos.i32).array.i32;
		neigh.array.i32 :=.array.i32 t205.array.i32;
		i.i32 :=.i32 0.i32;
		While4:
			t206.i32 :=.i32 arraylength(neigh.array.i32).i32;
			if (i.i32 <.bool t206.i32) goto Loop4;
			goto EndWhile4;
		Loop4:
			t207.array.i32 :=.array.i32 getfield(this, field.array.i32).array.i32;
			t208.i32 :=.i32 neigh[i.i32].i32;
			t209.i32 :=.i32 t207[t208.i32].i32;
			t211.bool :=.bool invokevirtual(this, "ne", t209.i32, 0.i32).bool;
			if (t211.bool &&.bool t211.bool) goto True10;
				goto Endif10;
			True10:
				t210.i32 :=.i32 ret.i32 +.i32 1.i32;
				ret.i32 :=.i32 t210.i32;
			Endif10:
			t212.i32 :=.i32 i.i32 +.i32 1.i32;
			i.i32 :=.i32 t212.i32;
			goto While4;
		EndWhile4:
		ret.i32 ret.i32;
	}

	.method public busyWait(ms.i32).bool {
		t213.i32 :=.i32 getfield(this, LOOPS_PER_MS.i32).i32;
		t214.i32 :=.i32 $0.ms.i32 *.i32 t213.i32;
		n.i32 :=.i32 t214.i32;
		i.i32 :=.i32 0.i32;
		While5:
			if (i.i32 <.bool n.i32) goto Loop5;
			goto EndWhile5;
		Loop5:
			t215.i32 :=.i32 i.i32 +.i32 1.i32;
			i.i32 :=.i32 t215.i32;
			goto While5;
		EndWhile5:
		ret.bool true.bool;
	}

	.method public eq(a.i32, b.i32).bool {
		t216.bool :=.bool invokevirtual(this, "lt", $1.a.i32, $0.b.i32).bool;
		t218.bool :=.bool t216.bool !.bool t216.bool;
		t217.bool :=.bool invokevirtual(this, "lt", $0.b.i32, $1.a.i32).bool;
		t219.bool :=.bool t217.bool !.bool t217.bool;
		t220.bool :=.bool t218.bool &&.bool t219.bool;
		ret.bool t220.bool;
	}

	.method public ne(a.i32, b.i32).bool {
		t221.bool :=.bool invokevirtual(this, "eq", $1.a.i32, $0.b.i32).bool;
		t222.bool :=.bool t221.bool !.bool t221.bool;
		ret.bool t222.bool;
	}

	.method public lt(a.i32, b.i32).bool {
		t223.bool :=.bool $1.a.i32 <.bool $0.b.i32;
		ret.bool t223.bool;
	}

	.method public le(a.i32, b.i32).bool {
		t224.bool :=.bool invokevirtual(this, "lt", $1.a.i32, $0.b.i32).bool;
		t226.bool :=.bool t224.bool !.bool t224.bool;
		t225.bool :=.bool invokevirtual(this, "eq", $1.a.i32, $0.b.i32).bool;
		t227.bool :=.bool t225.bool !.bool t225.bool;
		t228.bool :=.bool t226.bool &&.bool t227.bool;
		t229.bool :=.bool t228.bool !.bool t228.bool;
		ret.bool t229.bool;
	}

	.method public gt(a.i32, b.i32).bool {
		t230.bool :=.bool invokevirtual(this, "le", $1.a.i32, $0.b.i32).bool;
		t231.bool :=.bool t230.bool !.bool t230.bool;
		ret.bool t231.bool;
	}

	.method public ge(a.i32, b.i32).bool {
		t232.bool :=.bool invokevirtual(this, "gt", $1.a.i32, $0.b.i32).bool;
		t234.bool :=.bool t232.bool !.bool t232.bool;
		t233.bool :=.bool invokevirtual(this, "eq", $1.a.i32, $0.b.i32).bool;
		t235.bool :=.bool t233.bool !.bool t233.bool;
		t236.bool :=.bool t234.bool &&.bool t235.bool;
		t237.bool :=.bool t236.bool !.bool t236.bool;
		ret.bool t237.bool;
	}
}
