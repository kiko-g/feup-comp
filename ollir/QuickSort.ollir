QuickSort {

	.construct QuickSort().V {
		invokespecial(this, "<init>").V;
	}

	.method public main(a.array.String).V {
		t631.array.i32 :=.array.i32 new(array, 10.i32).array.i32;
		L.array.i32 :=.array.i32 t631.array.i32;
		i.i32 :=.i32 0.i32;
		While21:
			t632.i32 :=.i32 arraylength(L.array.i32).i32;
			if (i.i32 <.bool t632.i32) goto Loop21;
			goto EndWhile21;
		Loop21:
			t633.i32 :=.i32 arraylength(L.array.i32).i32;
			t634.i32 :=.i32 t633.i32 -.i32 i.i32;
			L[i.i32].i32 :=.i32 t634.i32;
			t635.i32 :=.i32 i.i32 +.i32 1.i32;
			i.i32 :=.i32 t635.i32;
			goto While21;
		EndWhile21:
		t636.QuickSort :=.QuickSort new(QuickSort).QuickSort;
		invokespecial(t636.QuickSort,"<init>").V;
		q.QuickSort :=.QuickSort t636.QuickSort;
		invokevirtual(q.QuickSort, "quicksort", L.array.i32).bool;
		invokevirtual(q.QuickSort, "printL", L.array.i32).bool;
		ret.V;
	}

	.method public printL(L.array.i32).bool {
		i.i32 :=.i32 0.i32;
		While22:
			t637.i32 :=.i32 arraylength($0.L.array.i32).i32;
			if (i.i32 <.bool t637.i32) goto Loop22;
			goto EndWhile22;
		Loop22:
			t638.i32 :=.i32 $0.L[i.i32].i32;
			invokestatic(io, "println", t638.i32).V;
			t639.i32 :=.i32 i.i32 +.i32 1.i32;
			i.i32 :=.i32 t639.i32;
			goto While22;
		EndWhile22:
		ret.bool true.bool;
	}

	.method public quicksort(L.array.i32).bool {
		t640.i32 :=.i32 arraylength($0.L.array.i32).i32;
		t641.i32 :=.i32 t640.i32 -.i32 1.i32;
		t642.bool :=.bool invokevirtual(this, "quicksort", $0.L.array.i32, 0.i32, t641.i32).bool;
		ret.bool t642.bool;
	}

	.method public quicksort(L.array.i32, lo.i32, hi.i32).bool {
		if ($2.lo.i32 <.bool $1.hi.i32) goto True39;
			goto Endif39;
		True39:
			t643.i32 :=.i32 invokevirtual(this, "partition", $0.L.array.i32, $2.lo.i32, $1.hi.i32).i32;
			p.i32 :=.i32 t643.i32;
			t644.i32 :=.i32 p.i32 -.i32 1.i32;
			invokevirtual(this, "quicksort", $0.L.array.i32, $2.lo.i32, t644.i32).bool;
			t645.i32 :=.i32 p.i32 +.i32 1.i32;
			invokevirtual(this, "quicksort", $0.L.array.i32, t645.i32, $1.hi.i32).bool;
		Endif39:
		ret.bool true.bool;
	}

	.method public partition(L.array.i32, lo.i32, hi.i32).i32 {
		t646.i32 :=.i32 $0.L[$1.hi.i32].i32;
		p.i32 :=.i32 t646.i32;
		i.i32 :=.i32 $2.lo.i32;
		j.i32 :=.i32 $2.lo.i32;
		While23:
			if (j.i32 <.bool $1.hi.i32) goto Loop23;
			goto EndWhile23;
		Loop23:
			t647.i32 :=.i32 $0.L[j.i32].i32;
			if (t647.i32 <.bool p.i32) goto True40;
				goto Endif40;
			True40:
				t648.i32 :=.i32 $0.L[i.i32].i32;
				tmp.i32 :=.i32 t648.i32;
				t649.i32 :=.i32 $0.L[j.i32].i32;
				$0.L[i.i32].i32 :=.i32 t649.i32;
				$0.L[j.i32].i32 :=.i32 tmp.i32;
				t650.i32 :=.i32 i.i32 +.i32 1.i32;
				i.i32 :=.i32 t650.i32;
			Endif40:
			t651.i32 :=.i32 j.i32 +.i32 1.i32;
			j.i32 :=.i32 t651.i32;
			goto While23;
		EndWhile23:
		t652.i32 :=.i32 $0.L[i.i32].i32;
		tmp.i32 :=.i32 t652.i32;
		t653.i32 :=.i32 $0.L[$1.hi.i32].i32;
		$0.L[i.i32].i32 :=.i32 t653.i32;
		$0.L[$1.hi.i32].i32 :=.i32 tmp.i32;
		ret.i32 i.i32;
	}
}
